- name: add vault repo
  shell: "{{ item }}"
  args:
    executable: /bin/bash
  with_items:
    - "yum install -y yum-utils"
    - "yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo"
  become: true
  ignore_errors: true

- name: install vault binary
  yum:
    name: vault-1.6.3-1.x86_64
    state: present
  become: true

- name: create temp directory
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ vault_temp_dir }}"

- name: copy files to create certs
  template:
    src: "templates/{{ item }}"
    dest: "{{ vault_temp_dir }}/{{ item }}"
    mode: 0755
  with_items:
    - "create-cert.sh"
    - "intermediate.cnf"
    - "openssl.cnf"

- name: create cert
  shell: "{{ item }}"
  args:
    executable: /bin/bash
    chdir: "{{ vault_temp_dir }}"
  with_items:
    - "./create-cert.sh"
  become: true

- name: copy certs to vault conf directory
  shell: "{{ item }}"
  args:
    executable: /bin/bash
    chdir: "{{ vault_temp_dir }}"
  with_items:
    - "cp work/ca/certs/localhost.cert.pem {{ vault_conf_dir }}/localhost.cert.pem"
    - "cp work/ca/private/localhost.decrypted.key.pem {{ vault_conf_dir }}/localhost.decrypted.key.pem"
    - "cp work/keystore.jks {{ vault_conf_dir }}/keystore.jks"
    - "chown vault:vault -R {{ vault_conf_dir }}"
    - "chmod 777 -R {{ vault_conf_dir }}/"
  become: true

- name: copy vault configuration
  template:
    src: "templates/{{ item }}"
    dest: "{{ vault_conf_dir }}/{{ item }}"
    mode: 0755
  with_items:
    - "vault.hcl"
  become: true

- name: copy vault service
  template:
    src: "templates/{{ item }}"
    dest: "/etc/systemd/system/{{ item }}"
    mode: 0755
  with_items:
    - "vault.service"
  become: true

- name: start vault
  service:
    name: vault
    state: started
  become: true

- name: remove temp dir
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ vault_temp_dir }}"

- name: init vault
  shell: "{{ item }}"
  args:
    executable: /bin/bash
  with_items:
    - "vault operator init"
  environment: "{{ vault_env }}"
  register: vault_init_out
  become: true
  ignore_errors: true

- debug:
    msg: "{{ vault_init_out }}"

- name: prompt for unseal vault 1
  pause:
    prompt: "Enter 1. Unseal Key "
    echo: yes
  register: unseal_vault_key_1
- set_fact:
    unseal_vault_key_1_input: "{{ unseal_vault_key_1.user_input }}"
- debug:
    var: "{{ unseal_vault_key_1_input }}"
  ignore_errors: true
- name: execute 1. unseal vault
  shell: "{{ item }}"
  args:
    executable: /bin/bash
  with_items:
    - "vault operator unseal {{ unseal_vault_key_1_input }}"
  environment: "{{ vault_env }}"
  register: unseal_vault_1_exec
  become: true
- debug:
    msg: "{{ unseal_vault_1_exec }}"
  ignore_errors: true

- name: prompt for unseal vault 2
  pause:
    prompt: "Enter 2. Unseal Key "
    echo: yes
  register: unseal_vault_key_2
- set_fact:
    unseal_vault_key_2_input: "{{ unseal_vault_key_2.user_input }}"
- debug:
    var: "{{ unseal_vault_key_2_input }}"
  ignore_errors: true
- name: execute 2. unseal vault
  shell: "{{ item }}"
  args:
    executable: /bin/bash
  with_items:
    - "vault operator unseal {{ unseal_vault_key_2_input }}"
  environment: "{{ vault_env }}"
  register: unseal_vault_2_exec
  become: true
- debug:
    msg: "{{ unseal_vault_2_exec }}"
  ignore_errors: true

- name: prompt for unseal vault 3
  pause:
    prompt: "Enter 3. Unseal Key "
    echo: yes
  register: unseal_vault_key_3
- set_fact:
    unseal_vault_key_3_input: "{{ unseal_vault_key_3.user_input }}"
- debug:
    var: "{{ unseal_vault_key_3_input }}"
  ignore_errors: true
- name: execute 3. unseal vault
  shell: "{{ item }}"
  args:
    executable: /bin/bash
  with_items:
    - "vault operator unseal {{ unseal_vault_key_3_input }}"
  environment: "{{ vault_env }}"
  register: unseal_vault_3_exec
  become: true
- debug:
    msg: "{{ unseal_vault_3_exec }}"
  ignore_errors: true

- name: prompt for initial root token
  pause:
    prompt: "Enter Initial Root Token "
    echo: yes
  register: init_root_token
- set_fact:
    init_root_token_input: "{{ init_root_token.user_input }}"
- debug:
    var: "{{ init_root_token_input }}"
  ignore_errors: true
- name: enable kv secret engine
  shell: "{{ item }}"
  args:
    executable: /bin/bash
  with_items:
    - "export VAULT_TOKEN={{ init_root_token_input }} && vault secrets enable -path=secret/ kv"
  environment: "{{ vault_env }}"
  register: enable_secret_engine
  become: true
- debug:
    msg: "{{ enable_secret_engine }}"
  ignore_errors: true


